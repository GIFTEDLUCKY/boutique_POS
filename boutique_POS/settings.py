"""
Django settings for multi_store_pos project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import datetime
import os
from dotenv import load_dotenv

print("GAE_ENV:", os.getenv('GAE_ENV', 'NOT SET'))
print("DB_HOST:", os.getenv('DB_HOST', 'NOT SET'))

# Define BASE_DIR as a Path object
BASE_DIR = Path(__file__).resolve().parent.parent

# Now you can safely use the `/` operator to join paths
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",  # Using Path object for directory joining
]





# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret Ok!
SECRET_KEY = 'django-insecure-%vucmgr0n798bp)x5pntjq5vwz8lv-ofcpcgtvwx&c*jh2ituh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['https://90e2-102-176-65-243.ngrok-free.app']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'dashboard',
    'crispy_forms',
    'crispy_bootstrap5',
    'store',
    'billing',
    'widget_tweaks',
    'django_extensions',
    'expenses',
    'inventory',
    'reports',
    
]

MIDDLEWARE = [
    'boutique_POS.middleware.ExpiryCheckMiddleware',  
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'boutique_POS.middleware.CurrentUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
]

ROOT_URLCONF = 'boutique_POS.urls'
AUTH_USER_MODEL = 'accounts.CustomUser'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'glimsinventory@gmail.com'
EMAIL_HOST_PASSWORD = 'vjpd bzdv fjtl qmce'  # Not your normal Gmail password!
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



EXPIRATION_DATE = datetime(2026, 4, 30)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/ 'templates',
                 BASE_DIR/ 'accounts/templates',
                 
                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.store',
            ],
        },
    },
]

WSGI_APPLICATION = 'boutique_POS.wsgi.application'


# Databases
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases 
import os
from dotenv import load_dotenv

load_dotenv()

if os.getenv('GAE_ENV', '').startswith('standard'):
    # Production (App Engine) - use UNIX socket for Cloud SQL
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'giftedlucky$boutique_db',
        'USER': 'giftedlucky',
        'PASSWORD': 'Lu@582580',  # the password you set for MySQL
        'HOST': 'giftedlucky.mysql.pythonanywhere-services.com',
        'PORT': '3306',
    }
}

else:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'boutique_db',  # New database name
        'USER': 'admin',
        'PASSWORD': 'admin',
        'HOST': 'localhost',  # Or 'localhost'
        'PORT': '3306',
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Enable WhiteNoise for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# from google.oauth2 import service_account
